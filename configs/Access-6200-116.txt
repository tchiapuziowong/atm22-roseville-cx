Current configuration:
!
!Version ArubaOS-CX ML.10.07.0010
!export-password: default
hostname Access-6200-116
user admin group administrators password ciphertext AQBapXHO3AM2PSoZfDOui7b8KXjn/ynj7uaB9EK5ouIs8ldUYgAAAGiQmleOSA0CCg7g4HENugtaf4ZwjNTZ5L6aVBBeX43DGMgGp67B8FtjeZtoNBR0C1YSTG5Izg5GlOzBx66FDq/VM/cpJ6JMO+5jBgO8ypmYcjkaOsmXdrQnp8gvQlqhRni2
user autobot group administrators password ciphertext AQBapeQxk+yFo1/sGoS99yuSQBxi3FW9CieHMCMGXuefW3+JYgAAAONeqNjqB0tnOGHo3WT3pWwn6hxnsQL7/jFgAiJoFJSPUXR9aA7KFOs42ZGFjpfHWHel0X8COdXLulyEDRjk3t1mqaQ5lmVuzmspe3EXO9r5qWXqUiDHOY3z5G2n8R+QdiaL
clock timezone america/los_angeles
ntp server 10.80.2.219 iburst
ntp enable
!
!
!
!
!
!
ssh server vrf default
ssh server vrf mgmt
debug portaccess all
vsf member 1 
    type jl728a
vlan 1
spanning-tree
interface mgmt
    no shutdown
    ip static 192.168.0.216/24
    default-gateway 192.168.0.1
aaa authentication port-access dot1x authenticator
    enable
aaa authentication port-access mac-auth
    enable
interface lag 220
    no shutdown
    vlan access 1
    lacp mode active
interface 1/1/1
    no shutdown
    vlan access 1
interface 1/1/2
    no shutdown
    vlan access 1
interface 1/1/3
    no shutdown
    vlan access 1
interface 1/1/4
    no shutdown
    vlan access 1
interface 1/1/5
    no shutdown
    vlan access 1
interface 1/1/6
    no shutdown
    vlan access 1
interface 1/1/7
    no shutdown
    vlan access 1
interface 1/1/8
    no shutdown
    vlan access 1
interface 1/1/9
    no shutdown
    vlan access 1
interface 1/1/10
    no shutdown
    vlan access 1
interface 1/1/11
    no shutdown
    vlan access 1
interface 1/1/12
    no shutdown
    vlan access 1
interface 1/1/13
    no shutdown
    vlan access 1
interface 1/1/14
    no shutdown
    vlan access 1
interface 1/1/15
    no shutdown
    vlan access 1
interface 1/1/16
    no shutdown
    vlan access 1
interface 1/1/17
    no shutdown
    vlan access 1
interface 1/1/18
    no shutdown
    vlan access 1
interface 1/1/19
    no shutdown
    vlan access 1
interface 1/1/20
    no shutdown
    vlan access 1
interface 1/1/21
    no shutdown
    vlan access 1
interface 1/1/22
    no shutdown
    vlan access 1
interface 1/1/23
    no shutdown
    vlan access 1
interface 1/1/24
    no shutdown
    vlan access 1
interface 1/1/25
    no shutdown
    vlan access 1
interface 1/1/26
    no shutdown
    vlan access 1
interface 1/1/27
    no shutdown
    vlan access 1
interface 1/1/28
    no shutdown
    vlan access 1
interface 1/1/29
    no shutdown
    vlan access 1
interface 1/1/30
    no shutdown
    vlan access 1
interface 1/1/31
    no shutdown
    vlan access 1
interface 1/1/32
    no shutdown
    vlan access 1
interface 1/1/33
    no shutdown
    vlan access 1
interface 1/1/34
    no shutdown
    vlan access 1
interface 1/1/35
    no shutdown
    vlan access 1
interface 1/1/36
    no shutdown
    vlan access 1
interface 1/1/37
    no shutdown
    vlan access 1
interface 1/1/38
    no shutdown
    vlan access 1
interface 1/1/39
    no shutdown
    vlan access 1
interface 1/1/40
    no shutdown
    vlan access 1
interface 1/1/41
    no shutdown
    vlan access 1
interface 1/1/42
    no shutdown
    vlan access 1
interface 1/1/43
    no shutdown
    vlan access 1
interface 1/1/44
    no shutdown
    vlan access 1
interface 1/1/45
    no shutdown
    vlan access 1
interface 1/1/46
    no shutdown
    vlan access 1
interface 1/1/47
    no shutdown
    vlan access 1
interface 1/1/48
    no shutdown
    vlan access 1
interface 1/1/49
    no shutdown
    vlan access 1
interface 1/1/50
    no shutdown
    vlan access 1
interface 1/1/51
    no shutdown
    vlan access 1
interface 1/1/52
    no shutdown
    vlan access 1
interface vlan 1
    ip dhcp
ip route 0.0.0.0/0 172.25.5.251
ip dns server-address 10.80.2.219 vrf mgmt
!
!
!
!
!
https-server vrf default
https-server vrf mgmt
nae-script hardware_device_health_monitor false 
nae-script interface_link_state_monitor false IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0NCiMNCiMgQ29weXJpZ2h0IChjKSAyMDE3IEhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIERldmVsb3BtZW50IExQDQojDQojIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KIyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQojIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdA0KIw0KIyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjANCiMNCiMgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLA0KIyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbg0KIyAiQVMgSVMiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkNCiMgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUNCiMgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucw0KIyB1bmRlciB0aGUgTGljZW5zZS4NCg0KTWFuaWZlc3QgPSB7DQogICAgJ05hbWUnOiAnaW50ZXJmYWNlX2xpbmtfc3RhdGVfbW9uaXRvcicsDQogICAgJ0Rlc2NyaXB0aW9uJzogJ0ludGVyZmFjZSBMaW5rIFN0YXR1cyBNb25pdG9yaW5nIEFnZW50JywNCiAgICAnVmVyc2lvbic6ICcxLjAnLA0KICAgICdBdXRob3InOiAnQXJ1YmEgTmV0d29ya3MnDQp9DQoNCg0KY2xhc3MgUG9saWN5KE5BRSk6DQoNCiAgICBkZWYgX19pbml0X18oc2VsZik6DQogICAgICAgICMgSW50ZXJmYWNlIHN0YXR1cw0KICAgICAgICB1cmkxID0gJy9yZXN0L3YxL3N5c3RlbS9pbnRlcmZhY2VzLyo/YXR0cmlidXRlcz1saW5rX3N0YXRlJw0KICAgICAgICBzZWxmLm0xID0gTW9uaXRvcigNCiAgICAgICAgICAgIHVyaTEsDQogICAgICAgICAgICAnSW50ZXJmYWNlIExpbmsgc3RhdHVzJykNCiAgICAgICAgc2VsZi5yMSA9IFJ1bGUoJ0xpbmsgV2VudCBEb3duJykNCiAgICAgICAgc2VsZi5yMS5jb25kaXRpb24oJ3RyYW5zaXRpb24ge30gZnJvbSAidXAiIHRvICJkb3duIicsIFtzZWxmLm0xXSkNCiAgICAgICAgc2VsZi5yMS5hY3Rpb24oc2VsZi5hY3Rpb25faW50ZXJmYWNlX2Rvd24pDQoNCiAgICAgICAgIyBSZXNldCBwb2xpY3kgc3RhdHVzIHdoZW4gbGluayBpcyB1cA0KICAgICAgICBzZWxmLnIyID0gUnVsZSgnTGluayBDYW1lIFVQJykNCiAgICAgICAgc2VsZi5yMi5jb25kaXRpb24oJ3RyYW5zaXRpb24ge30gZnJvbSAiZG93biIgdG8gInVwIicsIFtzZWxmLm0xXSkNCiAgICAgICAgc2VsZi5yMi5hY3Rpb24oc2VsZi5hY3Rpb25faW50ZXJmYWNlX3VwKQ0KDQogICAgICAgICMgdmFyaWFibGVzDQogICAgICAgIHNlbGYudmFyaWFibGVzWydsaW5rc19kb3duJ10gPSAnJw0KDQogICAgZGVmIGFjdGlvbl9pbnRlcmZhY2VfZG93bihzZWxmLCBldmVudCk6DQogICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKCI9PT09PT09PT09PT09PT09IERvd24gPT09PT09PT09PT09PT09PSIpDQogICAgICAgIGxhYmVsID0gZXZlbnRbJ2xhYmVscyddDQogICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKCdsYWJlbDogWycgKyBsYWJlbCArICddJykNCiAgICAgICAgXywgaW50ZXJmYWNlX2lkID0gbGFiZWwuc3BsaXQoJywnKVswXS5zcGxpdCgnPScpDQogICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKCdpbnRlcmZhY2VfaWQgLSAnICsgaW50ZXJmYWNlX2lkKQ0KICAgICAgICBsaW5rc19kb3duID0gc2VsZi52YXJpYWJsZXNbJ2xpbmtzX2Rvd24nXQ0KICAgICAgICBzZWxmLmxvZ2dlci5kZWJ1ZygnbGlua3NfZG93biBiZWZvcmU6IFsnDQogICAgICAgICAgICAgICAgICAgICAgICAgICsgbGlua3NfZG93biArICddJykNCiAgICAgICAgaWYgKGludGVyZmFjZV9pZCArICc6Jykgbm90IGluIGxpbmtzX2Rvd246DQogICAgICAgICAgICBsaW5rc19kb3duID0gbGlua3NfZG93biArIGludGVyZmFjZV9pZCArICc6Jw0KICAgICAgICAgICAgc2VsZi52YXJpYWJsZXNbJ2xpbmtzX2Rvd24nXSA9IGxpbmtzX2Rvd24NCiAgICAgICAgICAgIEFjdGlvblN5c2xvZygnSW50ZXJmYWNlICcgKyBpbnRlcmZhY2VfaWQgKyAnIExpbmsgZ29uZSBkb3duJykNCiAgICAgICAgICAgIEFjdGlvbkNMSSgic2hvdyBsbGRwIGNvbmZpZ3VyYXRpb24gIiArIGludGVyZmFjZV9pZCkNCiAgICAgICAgICAgIEFjdGlvbkNMSSgic2hvdyBpbnRlcmZhY2UgIiArIGludGVyZmFjZV9pZCArICIgZXh0ZW5kZWQiKQ0KICAgICAgICAgICAgaWYgc2VsZi5nZXRfYWxlcnRfbGV2ZWwoKSAhPSBBbGVydExldmVsLkNSSVRJQ0FMOg0KICAgICAgICAgICAgICAgIHNlbGYuc2V0X2FsZXJ0X2xldmVsKEFsZXJ0TGV2ZWwuQ1JJVElDQUwpDQogICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKCdsaW5rc19kb3duIGFmdGVyOiBbJw0KICAgICAgICAgICAgICAgICAgICAgICAgICArIGxpbmtzX2Rvd24gKyAnXScpDQogICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKCI9PT09PT09PT09PT09PT09IC9Eb3duID09PT09PT09PT09PT09PT0iKQ0KDQogICAgZGVmIGFjdGlvbl9pbnRlcmZhY2VfdXAoc2VsZiwgZXZlbnQpOg0KICAgICAgICBzZWxmLmxvZ2dlci5kZWJ1ZygiPT09PT09PT09PT09PT09PSBVcCA9PT09PT09PT09PT09PT09IikNCiAgICAgICAgbGFiZWwgPSBldmVudFsnbGFiZWxzJ10NCiAgICAgICAgc2VsZi5sb2dnZXIuZGVidWcoJ2xhYmVsOiBbJyArIGxhYmVsICsgJ10nKQ0KICAgICAgICBfLCBpbnRlcmZhY2VfaWQgPSBsYWJlbC5zcGxpdCgnLCcpWzBdLnNwbGl0KCc9JykNCiAgICAgICAgc2VsZi5sb2dnZXIuZGVidWcoJ2ludGVyZmFjZV9pZCAtICcgKyBpbnRlcmZhY2VfaWQpDQogICAgICAgIGxpbmtzX2Rvd24gPSBzZWxmLnZhcmlhYmxlc1snbGlua3NfZG93biddDQogICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKCdsaW5rc19kb3duIGJlZm9yZTogWycNCiAgICAgICAgICAgICAgICAgICAgICAgICAgKyBsaW5rc19kb3duICsgJ10nKQ0KICAgICAgICBpZiAoaW50ZXJmYWNlX2lkICsgJzonKSBpbiBsaW5rc19kb3duOg0KICAgICAgICAgICAgbGlua3NfZG93biA9IGxpbmtzX2Rvd24ucmVwbGFjZSgoaW50ZXJmYWNlX2lkICsgJzonKSwgJycpDQogICAgICAgICAgICBzZWxmLnZhcmlhYmxlc1snbGlua3NfZG93biddID0gbGlua3NfZG93bg0KICAgICAgICAgICAgc2VsZi5sb2dnZXIuZGVidWcoJ2xpbmtzX2Rvd24gYWZ0ZXI6IFsnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGxpbmtzX2Rvd24gKyAnXScpDQogICAgICAgICAgICBBY3Rpb25TeXNsb2coJ0ludGVyZmFjZSAnICsgaW50ZXJmYWNlX2lkICsgJyBMaW5rIGNhbWUgdXAnKQ0KICAgICAgICAgICAgaWYgbm90IGxpbmtzX2Rvd246DQogICAgICAgICAgICAgICAgaWYgc2VsZi5nZXRfYWxlcnRfbGV2ZWwoKSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICAgICAgICAgc2VsZi5yZW1vdmVfYWxlcnRfbGV2ZWwoKQ0KICAgICAgICBzZWxmLmxvZ2dlci5kZWJ1ZygiPT09PT09PT09PT09PT09PSAvVXAgPT09PT09PT09PT09PT09PSIp
nae-script interface_tx_rx_stats_monitor false IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KIwojIChjKSBDb3B5cmlnaHQgMjAxNy0yMDE5IEhld2xldHQgUGFja2FyZCBFbnRlcnByaXNlIERldmVsb3BtZW50IExQCiMKIyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKIyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiMgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiMKIyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKIwojIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywKIyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbgojICJBUyBJUyIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWQojIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlCiMgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucwojIHVuZGVyIHRoZSBMaWNlbnNlLgoKTWFuaWZlc3QgPSB7CiAgICAnTmFtZSc6ICdpbnRlcmZhY2VfdHhfcnhfc3RhdHNfbW9uaXRvcicsCiAgICAnRGVzY3JpcHRpb24nOiAnUGh5c2ljYWwgSW50ZXJmYWNlIFR4L1J4IHN0YXRpc3RpY3MgbW9uaXRvcmluZyBhZ2VudCcKICAgICAgICAgICAgICAgICAgICcgdXNpbmcgbXVsdGktZ3JhcGgnLAogICAgJ1ZlcnNpb24nOiAnMi4zJywKICAgICdUYXJnZXRTb2Z0d2FyZVZlcnNpb24nOiAnMTAuMDQnLAogICAgJ0F1dGhvcic6ICdBcnViYSBOZXR3b3JrcycKfQoKUGFyYW1ldGVyRGVmaW5pdGlvbnMgPSB7CiAgICAncnhfcGFja2V0c190aHJlc2hvbGQnOiB7CiAgICAgICAgJ05hbWUnOiAnVGhyZXNob2xkIGZvciBSeCBwYWNrZXRzJywKICAgICAgICAnRGVzY3JpcHRpb24nOiAnVGhyZXNob2xkIGZvciBudW1iZXIgb2YgUnggcGFja2V0cyByZWNlaXZlZCcsCiAgICAgICAgJ1R5cGUnOiAnaW50ZWdlcicsCiAgICAgICAgJ1JlcXVpcmVkJzogVHJ1ZQogICAgfSwKICAgICd0eF9wYWNrZXRzX3RocmVzaG9sZCc6IHsKICAgICAgICAnTmFtZSc6ICdUaHJlc2hvbGQgZm9yIFR4IHBhY2tldHMnLAogICAgICAgICdEZXNjcmlwdGlvbic6ICdUaHJlc2hvbGQgZm9yIG51bWJlciBvZiBUeCBwYWNrZXRzIHRyYW5zbWl0dGVkJywKICAgICAgICAnVHlwZSc6ICdpbnRlZ2VyJywKICAgICAgICAnUmVxdWlyZWQnOiBUcnVlCiAgICB9Cn0KCgpjbGFzcyBBZ2VudChOQUUpOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICAjIHJ4IHBhY2tldHMKICAgICAgICB1cmkxID0gJy9yZXN0L3YxL3N5c3RlbS9pbnRlcmZhY2VzLyo/YXR0cmlidXRlcz1zdGF0aXN0aWNzLnJ4X3BhY2tldHMnICsgXAogICAgICAgICAgICAnJmZpbHRlcj10eXBlOnN5c3RlbScKICAgICAgICByYXRlX20xID0gUmF0ZSh1cmkxLCAiMjAgc2Vjb25kcyIpCiAgICAgICAgc2VsZi5tMSA9IE1vbml0b3IocmF0ZV9tMSwgJ1J4IFBhY2tldHMgKHBhY2tldHMgcGVyIHNlY29uZCknKQogICAgICAgIHNlbGYucjEgPSBSdWxlKCdSdWxlIHRvIE1vbml0b3IgSW50ZXJmYWNlIHJ4IFBhY2tldHMnKQogICAgICAgIHNlbGYucjEuY29uZGl0aW9uKAogICAgICAgICAgICAne30gPiB7fScsIFtzZWxmLm0xLCBzZWxmLnBhcmFtc1sncnhfcGFja2V0c190aHJlc2hvbGQnXV0pCiAgICAgICAgc2VsZi5yMS5jbGVhcl9jb25kaXRpb24oCiAgICAgICAgICAgICd7fSA8IHt9JywgW3NlbGYubTEsIHNlbGYucGFyYW1zWydyeF9wYWNrZXRzX3RocmVzaG9sZCddXSkKICAgICAgICBzZWxmLnIxLmFjdGlvbigiQUxFUlRfTEVWRUwiLCBBbGVydExldmVsLkNSSVRJQ0FMKQogICAgICAgIHNlbGYucjEuY2xlYXJfYWN0aW9uKCJBTEVSVF9MRVZFTCIsIEFsZXJ0TGV2ZWwuTk9ORSkKCiAgICAgICAgIyByeCBwYWNrZXRzIGRyb3BwZWQKICAgICAgICB1cmkyID0gJy9yZXN0L3YxL3N5c3RlbS9pbnRlcmZhY2VzLyo/YXR0cmlidXRlcz1zdGF0aXN0aWNzLnJ4X2Ryb3BwZWQnICsgXAogICAgICAgICAgICAnJmZpbHRlcj10eXBlOnN5c3RlbScKICAgICAgICBzZWxmLm0yID0gTW9uaXRvcigKICAgICAgICAgICAgdXJpMiwKICAgICAgICAgICAgJ1J4IFBhY2tldHMgRHJvcHBlZCAocGFja2V0cyknKQoKICAgICAgICAjIHR4IHBhY2tldHMKICAgICAgICB1cmkzID0gJy9yZXN0L3YxL3N5c3RlbS9pbnRlcmZhY2VzLyo/YXR0cmlidXRlcz1zdGF0aXN0aWNzLnR4X3BhY2tldHMnICsgXAogICAgICAgICAgICAnJmZpbHRlcj10eXBlOnN5c3RlbScKICAgICAgICByYXRlX20zID0gUmF0ZSh1cmkzLCAiMjAgc2Vjb25kcyIpCiAgICAgICAgc2VsZi5tMyA9IE1vbml0b3IocmF0ZV9tMywgJ1R4IFBhY2tldHMgKHBhY2tldHMgcGVyIHNlY29uZCknKQogICAgICAgIHNlbGYucjMgPSBSdWxlKCdSdWxlIHRvIE1vbml0b3IgSW50ZXJmYWNlIHR4IFBhY2tldHMnKQoKICAgICAgICBzZWxmLnIzLmNvbmRpdGlvbigKICAgICAgICAgICAgJ3t9ID4ge30nLCBbc2VsZi5tMywgc2VsZi5wYXJhbXNbJ3R4X3BhY2tldHNfdGhyZXNob2xkJ11dKQogICAgICAgIHNlbGYucjMuY2xlYXJfY29uZGl0aW9uKAogICAgICAgICAgICAne30gPCB7fScsIFtzZWxmLm0zLCBzZWxmLnBhcmFtc1sndHhfcGFja2V0c190aHJlc2hvbGQnXV0pCiAgICAgICAgc2VsZi5yMy5hY3Rpb24oIkFMRVJUX0xFVkVMIiwgQWxlcnRMZXZlbC5DUklUSUNBTCkKICAgICAgICBzZWxmLnIzLmNsZWFyX2FjdGlvbigiQUxFUlRfTEVWRUwiLCBBbGVydExldmVsLk5PTkUpCgogICAgICAgICMgdHggcGFja2V0cyBkcm9wcGVkCiAgICAgICAgdXJpNCA9ICcvcmVzdC92MS9zeXN0ZW0vaW50ZXJmYWNlcy8qP2F0dHJpYnV0ZXM9c3RhdGlzdGljcy50eF9kcm9wcGVkJyArIFwKICAgICAgICAgICAgJyZmaWx0ZXI9dHlwZTpzeXN0ZW0nCiAgICAgICAgc2VsZi5tNCA9IE1vbml0b3IoCiAgICAgICAgICAgIHVyaTQsCiAgICAgICAgICAgICdUeCBQYWNrZXRzIERyb3BwZWQgKHBhY2tldHMpJykKCiAgICAgICAgIyBncmFwaCBkaXNwbGF5IGZvciBjaGFuZ2Ugb2YgdHJhZmZpYyBhbmQgcGFja2V0cyBkcm9wCiAgICAgICAgc2VsZi5ncmFwaF90eF9yeF9wYWNrZXRzID0gXAogICAgICAgICAgICBHcmFwaChbc2VsZi5tMSwgc2VsZi5tM10sCiAgICAgICAgICAgICAgICAgIHRpdGxlPVRpdGxlKAogICAgICAgICAgICAgICAgICAgICAgIlJhdGUgb2YgY2hhbmdlIG9mIEludGVyZmFjZSBUeC9SeCBwYWNrZXRzIChpbiBzZWNvbmRzKSIpLAogICAgICAgICAgICAgICAgICBkYXNoYm9hcmRfZGlzcGxheT1UcnVlKQogICAgICAgIHNlbGYuZ3JhcGhfdHhfcnhfZHJvcCA9IFwKICAgICAgICAgICAgR3JhcGgoW3NlbGYubTIsIHNlbGYubTRdLAogICAgICAgICAgICAgICAgICB0aXRsZT1UaXRsZSgiSW50ZXJmYWNlIFR4L1J4IHBhY2tldHMgZHJvcCBjb3VudCIpLAogICAgICAgICAgICAgICAgICBkYXNoYm9hcmRfZGlzcGxheT1GYWxzZSk=
nae-script network_health_monitor false ...
nae-script software_device_health_monitor false 
nae-agent hardware_device_health_monitor Hardware_Device_Health false
nae-agent interface_tx_rx_stats_monitor Interface_Monitor false rx_packets_threshold:MTAwMDA= tx_packets_threshold:MTAwMDA=
nae-agent interface_link_state_monitor Interface_State_Monitor false
nae-agent software_device_health_monitor Software_Device_Health false
